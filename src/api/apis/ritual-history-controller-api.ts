/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BulkRitualHistoryStatusUpdateRequest } from '../models';
// @ts-ignore
import type { CurrentRitualsDTO } from '../models';
// @ts-ignore
import type { RitualHistoryDTO } from '../models';
// @ts-ignore
import type { RitualHistoryStatusUpdateRequest } from '../models';
/**
 * RitualHistoryControllerApi - axios parameter creator
 * @export
 */
export const RitualHistoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/ritual-history/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<RitualHistoryDTO>} ritualHistoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreate: async (ritualHistoryDTO: Array<RitualHistoryDTO>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ritualHistoryDTO' is not null or undefined
            assertParamExists('bulkCreate', 'ritualHistoryDTO', ritualHistoryDTO)
            const localVarPath = `/api/ritual-history/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ritualHistoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BulkRitualHistoryStatusUpdateRequest} bulkRitualHistoryStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateStatus: async (bulkRitualHistoryStatusUpdateRequest: BulkRitualHistoryStatusUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkRitualHistoryStatusUpdateRequest' is not null or undefined
            assertParamExists('bulkUpdateStatus', 'bulkRitualHistoryStatusUpdateRequest', bulkRitualHistoryStatusUpdateRequest)
            const localVarPath = `/api/ritual-history/bulk/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkRitualHistoryStatusUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {RitualHistoryStatusUpdateRequest} ritualHistoryStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete: async (id: string, ritualHistoryStatusUpdateRequest: RitualHistoryStatusUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('complete', 'id', id)
            // verify required parameter 'ritualHistoryStatusUpdateRequest' is not null or undefined
            assertParamExists('complete', 'ritualHistoryStatusUpdateRequest', ritualHistoryStatusUpdateRequest)
            const localVarPath = `/api/ritual-history/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ritualHistoryStatusUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RitualHistoryDTO} ritualHistoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (ritualHistoryDTO: RitualHistoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ritualHistoryDTO' is not null or undefined
            assertParamExists('create', 'ritualHistoryDTO', ritualHistoryDTO)
            const localVarPath = `/api/ritual-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ritualHistoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ritual-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrent: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ritual-history/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {RitualHistoryStatusUpdateRequest} ritualHistoryStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus: async (id: string, ritualHistoryStatusUpdateRequest: RitualHistoryStatusUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateStatus', 'id', id)
            // verify required parameter 'ritualHistoryStatusUpdateRequest' is not null or undefined
            assertParamExists('updateStatus', 'ritualHistoryStatusUpdateRequest', ritualHistoryStatusUpdateRequest)
            const localVarPath = `/api/ritual-history/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ritualHistoryStatusUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RitualHistoryControllerApi - functional programming interface
 * @export
 */
export const RitualHistoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RitualHistoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<RitualHistoryDTO>} ritualHistoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreate(ritualHistoryDTO: Array<RitualHistoryDTO>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RitualHistoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreate(ritualHistoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.bulkCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BulkRitualHistoryStatusUpdateRequest} bulkRitualHistoryStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUpdateStatus(bulkRitualHistoryStatusUpdateRequest: BulkRitualHistoryStatusUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RitualHistoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUpdateStatus(bulkRitualHistoryStatusUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.bulkUpdateStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {RitualHistoryStatusUpdateRequest} ritualHistoryStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async complete(id: string, ritualHistoryStatusUpdateRequest: RitualHistoryStatusUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RitualHistoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.complete(id, ritualHistoryStatusUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.complete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RitualHistoryDTO} ritualHistoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(ritualHistoryDTO: RitualHistoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RitualHistoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(ritualHistoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RitualHistoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCurrent(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentRitualsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCurrent(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.listCurrent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {RitualHistoryStatusUpdateRequest} ritualHistoryStatusUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatus(id: string, ritualHistoryStatusUpdateRequest: RitualHistoryStatusUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RitualHistoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatus(id, ritualHistoryStatusUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.updateStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RitualHistoryControllerApi - factory interface
 * @export
 */
export const RitualHistoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RitualHistoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {RitualHistoryControllerApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: RitualHistoryControllerApiDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiBulkCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreate(requestParameters: RitualHistoryControllerApiBulkCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<RitualHistoryDTO>> {
            return localVarFp.bulkCreate(requestParameters.ritualHistoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiBulkUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUpdateStatus(requestParameters: RitualHistoryControllerApiBulkUpdateStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<RitualHistoryDTO>> {
            return localVarFp.bulkUpdateStatus(requestParameters.bulkRitualHistoryStatusUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiCompleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complete(requestParameters: RitualHistoryControllerApiCompleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO> {
            return localVarFp.complete(requestParameters.id, requestParameters.ritualHistoryStatusUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: RitualHistoryControllerApiCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO> {
            return localVarFp.create(requestParameters.ritualHistoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: RawAxiosRequestConfig): AxiosPromise<Array<RitualHistoryDTO>> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCurrent(options?: RawAxiosRequestConfig): AxiosPromise<CurrentRitualsDTO> {
            return localVarFp.listCurrent(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(requestParameters: RitualHistoryControllerApiUpdateStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO> {
            return localVarFp.updateStatus(requestParameters.id, requestParameters.ritualHistoryStatusUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RitualHistoryControllerApi - interface
 * @export
 * @interface RitualHistoryControllerApi
 */
export interface RitualHistoryControllerApiInterface {
    /**
     * 
     * @param {RitualHistoryControllerApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    _delete(requestParameters: RitualHistoryControllerApiDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {RitualHistoryControllerApiBulkCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    bulkCreate(requestParameters: RitualHistoryControllerApiBulkCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<RitualHistoryDTO>>;

    /**
     * 
     * @param {RitualHistoryControllerApiBulkUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    bulkUpdateStatus(requestParameters: RitualHistoryControllerApiBulkUpdateStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<RitualHistoryDTO>>;

    /**
     * 
     * @param {RitualHistoryControllerApiCompleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    complete(requestParameters: RitualHistoryControllerApiCompleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO>;

    /**
     * 
     * @param {RitualHistoryControllerApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    create(requestParameters: RitualHistoryControllerApiCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    list(options?: RawAxiosRequestConfig): AxiosPromise<Array<RitualHistoryDTO>>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    listCurrent(options?: RawAxiosRequestConfig): AxiosPromise<CurrentRitualsDTO>;

    /**
     * 
     * @param {RitualHistoryControllerApiUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    updateStatus(requestParameters: RitualHistoryControllerApiUpdateStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO>;

}

/**
 * Request parameters for _delete operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiDeleteRequest
 */
export interface RitualHistoryControllerApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof RitualHistoryControllerApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for bulkCreate operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiBulkCreateRequest
 */
export interface RitualHistoryControllerApiBulkCreateRequest {
    /**
     * 
     * @type {Array<RitualHistoryDTO>}
     * @memberof RitualHistoryControllerApiBulkCreate
     */
    readonly ritualHistoryDTO: Array<RitualHistoryDTO>
}

/**
 * Request parameters for bulkUpdateStatus operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiBulkUpdateStatusRequest
 */
export interface RitualHistoryControllerApiBulkUpdateStatusRequest {
    /**
     * 
     * @type {BulkRitualHistoryStatusUpdateRequest}
     * @memberof RitualHistoryControllerApiBulkUpdateStatus
     */
    readonly bulkRitualHistoryStatusUpdateRequest: BulkRitualHistoryStatusUpdateRequest
}

/**
 * Request parameters for complete operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiCompleteRequest
 */
export interface RitualHistoryControllerApiCompleteRequest {
    /**
     * 
     * @type {string}
     * @memberof RitualHistoryControllerApiComplete
     */
    readonly id: string

    /**
     * 
     * @type {RitualHistoryStatusUpdateRequest}
     * @memberof RitualHistoryControllerApiComplete
     */
    readonly ritualHistoryStatusUpdateRequest: RitualHistoryStatusUpdateRequest
}

/**
 * Request parameters for create operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiCreateRequest
 */
export interface RitualHistoryControllerApiCreateRequest {
    /**
     * 
     * @type {RitualHistoryDTO}
     * @memberof RitualHistoryControllerApiCreate
     */
    readonly ritualHistoryDTO: RitualHistoryDTO
}

/**
 * Request parameters for updateStatus operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiUpdateStatusRequest
 */
export interface RitualHistoryControllerApiUpdateStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof RitualHistoryControllerApiUpdateStatus
     */
    readonly id: string

    /**
     * 
     * @type {RitualHistoryStatusUpdateRequest}
     * @memberof RitualHistoryControllerApiUpdateStatus
     */
    readonly ritualHistoryStatusUpdateRequest: RitualHistoryStatusUpdateRequest
}

/**
 * RitualHistoryControllerApi - object-oriented interface
 * @export
 * @class RitualHistoryControllerApi
 * @extends {BaseAPI}
 */
export class RitualHistoryControllerApi extends BaseAPI implements RitualHistoryControllerApiInterface {
    /**
     * 
     * @param {RitualHistoryControllerApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public _delete(requestParameters: RitualHistoryControllerApiDeleteRequest, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiBulkCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public bulkCreate(requestParameters: RitualHistoryControllerApiBulkCreateRequest, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).bulkCreate(requestParameters.ritualHistoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiBulkUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public bulkUpdateStatus(requestParameters: RitualHistoryControllerApiBulkUpdateStatusRequest, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).bulkUpdateStatus(requestParameters.bulkRitualHistoryStatusUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiCompleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public complete(requestParameters: RitualHistoryControllerApiCompleteRequest, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).complete(requestParameters.id, requestParameters.ritualHistoryStatusUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public create(requestParameters: RitualHistoryControllerApiCreateRequest, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).create(requestParameters.ritualHistoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public list(options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public listCurrent(options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).listCurrent(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public updateStatus(requestParameters: RitualHistoryControllerApiUpdateStatusRequest, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).updateStatus(requestParameters.id, requestParameters.ritualHistoryStatusUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

