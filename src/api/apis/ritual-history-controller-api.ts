/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RitualHistoryDTO } from '../models';
/**
 * RitualHistoryControllerApi - axios parameter creator
 * @export
 */
export const RitualHistoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RitualHistoryDTO} ritualHistoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: async (ritualHistoryDTO: RitualHistoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ritualHistoryDTO' is not null or undefined
            assertParamExists('create2', 'ritualHistoryDTO', ritualHistoryDTO)
            const localVarPath = `/api/ritual-histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ritualHistoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete2', 'id', id)
            const localVarPath = `/api/ritual-histories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById2', 'id', id)
            const localVarPath = `/api/ritual-histories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [ritualId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (userId?: string, ritualId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ritual-histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (ritualId !== undefined) {
                localVarQueryParameter['ritualId'] = ritualId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {RitualHistoryDTO} ritualHistoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: async (id: string, ritualHistoryDTO: RitualHistoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update2', 'id', id)
            // verify required parameter 'ritualHistoryDTO' is not null or undefined
            assertParamExists('update2', 'ritualHistoryDTO', ritualHistoryDTO)
            const localVarPath = `/api/ritual-histories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ritualHistoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RitualHistoryControllerApi - functional programming interface
 * @export
 */
export const RitualHistoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RitualHistoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RitualHistoryDTO} ritualHistoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create2(ritualHistoryDTO: RitualHistoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RitualHistoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create2(ritualHistoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.create2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.delete2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById2(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RitualHistoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById2(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.getById2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {string} [ritualId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(userId?: string, ritualId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RitualHistoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(userId, ritualId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {RitualHistoryDTO} ritualHistoryDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(id: string, ritualHistoryDTO: RitualHistoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RitualHistoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update2(id, ritualHistoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RitualHistoryControllerApi.update2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RitualHistoryControllerApi - factory interface
 * @export
 */
export const RitualHistoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RitualHistoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {RitualHistoryControllerApiCreate2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(requestParameters: RitualHistoryControllerApiCreate2Request, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO> {
            return localVarFp.create2(requestParameters.ritualHistoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiDelete2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2(requestParameters: RitualHistoryControllerApiDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiGetById2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById2(requestParameters: RitualHistoryControllerApiGetById2Request, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO> {
            return localVarFp.getById2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: RitualHistoryControllerApiListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<RitualHistoryDTO>> {
            return localVarFp.list(requestParameters.userId, requestParameters.ritualId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RitualHistoryControllerApiUpdate2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2(requestParameters: RitualHistoryControllerApiUpdate2Request, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO> {
            return localVarFp.update2(requestParameters.id, requestParameters.ritualHistoryDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RitualHistoryControllerApi - interface
 * @export
 * @interface RitualHistoryControllerApi
 */
export interface RitualHistoryControllerApiInterface {
    /**
     * 
     * @param {RitualHistoryControllerApiCreate2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    create2(requestParameters: RitualHistoryControllerApiCreate2Request, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO>;

    /**
     * 
     * @param {RitualHistoryControllerApiDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    delete2(requestParameters: RitualHistoryControllerApiDelete2Request, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {RitualHistoryControllerApiGetById2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    getById2(requestParameters: RitualHistoryControllerApiGetById2Request, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO>;

    /**
     * 
     * @param {RitualHistoryControllerApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    list(requestParameters?: RitualHistoryControllerApiListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<RitualHistoryDTO>>;

    /**
     * 
     * @param {RitualHistoryControllerApiUpdate2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApiInterface
     */
    update2(requestParameters: RitualHistoryControllerApiUpdate2Request, options?: RawAxiosRequestConfig): AxiosPromise<RitualHistoryDTO>;

}

/**
 * Request parameters for create2 operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiCreate2Request
 */
export interface RitualHistoryControllerApiCreate2Request {
    /**
     * 
     * @type {RitualHistoryDTO}
     * @memberof RitualHistoryControllerApiCreate2
     */
    readonly ritualHistoryDTO: RitualHistoryDTO
}

/**
 * Request parameters for delete2 operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiDelete2Request
 */
export interface RitualHistoryControllerApiDelete2Request {
    /**
     * 
     * @type {string}
     * @memberof RitualHistoryControllerApiDelete2
     */
    readonly id: string
}

/**
 * Request parameters for getById2 operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiGetById2Request
 */
export interface RitualHistoryControllerApiGetById2Request {
    /**
     * 
     * @type {string}
     * @memberof RitualHistoryControllerApiGetById2
     */
    readonly id: string
}

/**
 * Request parameters for list operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiListRequest
 */
export interface RitualHistoryControllerApiListRequest {
    /**
     * 
     * @type {string}
     * @memberof RitualHistoryControllerApiList
     */
    readonly userId?: string

    /**
     * 
     * @type {string}
     * @memberof RitualHistoryControllerApiList
     */
    readonly ritualId?: string
}

/**
 * Request parameters for update2 operation in RitualHistoryControllerApi.
 * @export
 * @interface RitualHistoryControllerApiUpdate2Request
 */
export interface RitualHistoryControllerApiUpdate2Request {
    /**
     * 
     * @type {string}
     * @memberof RitualHistoryControllerApiUpdate2
     */
    readonly id: string

    /**
     * 
     * @type {RitualHistoryDTO}
     * @memberof RitualHistoryControllerApiUpdate2
     */
    readonly ritualHistoryDTO: RitualHistoryDTO
}

/**
 * RitualHistoryControllerApi - object-oriented interface
 * @export
 * @class RitualHistoryControllerApi
 * @extends {BaseAPI}
 */
export class RitualHistoryControllerApi extends BaseAPI implements RitualHistoryControllerApiInterface {
    /**
     * 
     * @param {RitualHistoryControllerApiCreate2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public create2(requestParameters: RitualHistoryControllerApiCreate2Request, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).create2(requestParameters.ritualHistoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiDelete2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public delete2(requestParameters: RitualHistoryControllerApiDelete2Request, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).delete2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiGetById2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public getById2(requestParameters: RitualHistoryControllerApiGetById2Request, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).getById2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public list(requestParameters: RitualHistoryControllerApiListRequest = {}, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).list(requestParameters.userId, requestParameters.ritualId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RitualHistoryControllerApiUpdate2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RitualHistoryControllerApi
     */
    public update2(requestParameters: RitualHistoryControllerApiUpdate2Request, options?: RawAxiosRequestConfig) {
        return RitualHistoryControllerApiFp(this.configuration).update2(requestParameters.id, requestParameters.ritualHistoryDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

