/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetHistoryResponse } from '../models';
// @ts-ignore
import type { SamplePromptsResponse } from '../models';
// @ts-ignore
import type { SendMessageRequest } from '../models';
// @ts-ignore
import type { SendMessageResponse } from '../models';
// @ts-ignore
import type { StartSessionRequest } from '../models';
// @ts-ignore
import type { StartSessionResponse } from '../models';
/**
 * AiChatControllerApi - axios parameter creator
 * @export
 */
export const AiChatControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatHistory: async (sessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('getChatHistory', 'sessionId', sessionId)
            const localVarPath = `/api/chat/sessions/{sessionId}/messages`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamplePrompts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chat/sample-prompts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {SendMessageRequest} sendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendRitualPack: async (sessionId: string, sendMessageRequest: SendMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('recommendRitualPack', 'sessionId', sessionId)
            // verify required parameter 'sendMessageRequest' is not null or undefined
            assertParamExists('recommendRitualPack', 'sendMessageRequest', sendMessageRequest)
            const localVarPath = `/api/chat/sessions/{sessionId}/recommend`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {SendMessageRequest} sendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage: async (sessionId: string, sendMessageRequest: SendMessageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('sendMessage', 'sessionId', sessionId)
            // verify required parameter 'sendMessageRequest' is not null or undefined
            assertParamExists('sendMessage', 'sendMessageRequest', sendMessageRequest)
            const localVarPath = `/api/chat/sessions/{sessionId}/messages`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StartSessionRequest} startSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSession: async (startSessionRequest: StartSessionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startSessionRequest' is not null or undefined
            assertParamExists('startSession', 'startSessionRequest', startSessionRequest)
            const localVarPath = `/api/chat/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startSessionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AiChatControllerApi - functional programming interface
 * @export
 */
export const AiChatControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AiChatControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} sessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChatHistory(sessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChatHistory(sessionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AiChatControllerApi.getChatHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSamplePrompts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SamplePromptsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSamplePrompts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AiChatControllerApi.getSamplePrompts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {SendMessageRequest} sendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recommendRitualPack(sessionId: string, sendMessageRequest: SendMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recommendRitualPack(sessionId, sendMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AiChatControllerApi.recommendRitualPack']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} sessionId 
         * @param {SendMessageRequest} sendMessageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMessage(sessionId: string, sendMessageRequest: SendMessageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMessage(sessionId, sendMessageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AiChatControllerApi.sendMessage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {StartSessionRequest} startSessionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startSession(startSessionRequest: StartSessionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startSession(startSessionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AiChatControllerApi.startSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AiChatControllerApi - factory interface
 * @export
 */
export const AiChatControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AiChatControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AiChatControllerApiGetChatHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChatHistory(requestParameters: AiChatControllerApiGetChatHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetHistoryResponse> {
            return localVarFp.getChatHistory(requestParameters.sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSamplePrompts(options?: RawAxiosRequestConfig): AxiosPromise<SamplePromptsResponse> {
            return localVarFp.getSamplePrompts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AiChatControllerApiRecommendRitualPackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendRitualPack(requestParameters: AiChatControllerApiRecommendRitualPackRequest, options?: RawAxiosRequestConfig): AxiosPromise<SendMessageResponse> {
            return localVarFp.recommendRitualPack(requestParameters.sessionId, requestParameters.sendMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AiChatControllerApiSendMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMessage(requestParameters: AiChatControllerApiSendMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<SendMessageResponse> {
            return localVarFp.sendMessage(requestParameters.sessionId, requestParameters.sendMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AiChatControllerApiStartSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startSession(requestParameters: AiChatControllerApiStartSessionRequest, options?: RawAxiosRequestConfig): AxiosPromise<StartSessionResponse> {
            return localVarFp.startSession(requestParameters.startSessionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AiChatControllerApi - interface
 * @export
 * @interface AiChatControllerApi
 */
export interface AiChatControllerApiInterface {
    /**
     * 
     * @param {AiChatControllerApiGetChatHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApiInterface
     */
    getChatHistory(requestParameters: AiChatControllerApiGetChatHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetHistoryResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApiInterface
     */
    getSamplePrompts(options?: RawAxiosRequestConfig): AxiosPromise<SamplePromptsResponse>;

    /**
     * 
     * @param {AiChatControllerApiRecommendRitualPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApiInterface
     */
    recommendRitualPack(requestParameters: AiChatControllerApiRecommendRitualPackRequest, options?: RawAxiosRequestConfig): AxiosPromise<SendMessageResponse>;

    /**
     * 
     * @param {AiChatControllerApiSendMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApiInterface
     */
    sendMessage(requestParameters: AiChatControllerApiSendMessageRequest, options?: RawAxiosRequestConfig): AxiosPromise<SendMessageResponse>;

    /**
     * 
     * @param {AiChatControllerApiStartSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApiInterface
     */
    startSession(requestParameters: AiChatControllerApiStartSessionRequest, options?: RawAxiosRequestConfig): AxiosPromise<StartSessionResponse>;

}

/**
 * Request parameters for getChatHistory operation in AiChatControllerApi.
 * @export
 * @interface AiChatControllerApiGetChatHistoryRequest
 */
export interface AiChatControllerApiGetChatHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof AiChatControllerApiGetChatHistory
     */
    readonly sessionId: string
}

/**
 * Request parameters for recommendRitualPack operation in AiChatControllerApi.
 * @export
 * @interface AiChatControllerApiRecommendRitualPackRequest
 */
export interface AiChatControllerApiRecommendRitualPackRequest {
    /**
     * 
     * @type {string}
     * @memberof AiChatControllerApiRecommendRitualPack
     */
    readonly sessionId: string

    /**
     * 
     * @type {SendMessageRequest}
     * @memberof AiChatControllerApiRecommendRitualPack
     */
    readonly sendMessageRequest: SendMessageRequest
}

/**
 * Request parameters for sendMessage operation in AiChatControllerApi.
 * @export
 * @interface AiChatControllerApiSendMessageRequest
 */
export interface AiChatControllerApiSendMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof AiChatControllerApiSendMessage
     */
    readonly sessionId: string

    /**
     * 
     * @type {SendMessageRequest}
     * @memberof AiChatControllerApiSendMessage
     */
    readonly sendMessageRequest: SendMessageRequest
}

/**
 * Request parameters for startSession operation in AiChatControllerApi.
 * @export
 * @interface AiChatControllerApiStartSessionRequest
 */
export interface AiChatControllerApiStartSessionRequest {
    /**
     * 
     * @type {StartSessionRequest}
     * @memberof AiChatControllerApiStartSession
     */
    readonly startSessionRequest: StartSessionRequest
}

/**
 * AiChatControllerApi - object-oriented interface
 * @export
 * @class AiChatControllerApi
 * @extends {BaseAPI}
 */
export class AiChatControllerApi extends BaseAPI implements AiChatControllerApiInterface {
    /**
     * 
     * @param {AiChatControllerApiGetChatHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApi
     */
    public getChatHistory(requestParameters: AiChatControllerApiGetChatHistoryRequest, options?: RawAxiosRequestConfig) {
        return AiChatControllerApiFp(this.configuration).getChatHistory(requestParameters.sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApi
     */
    public getSamplePrompts(options?: RawAxiosRequestConfig) {
        return AiChatControllerApiFp(this.configuration).getSamplePrompts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AiChatControllerApiRecommendRitualPackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApi
     */
    public recommendRitualPack(requestParameters: AiChatControllerApiRecommendRitualPackRequest, options?: RawAxiosRequestConfig) {
        return AiChatControllerApiFp(this.configuration).recommendRitualPack(requestParameters.sessionId, requestParameters.sendMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AiChatControllerApiSendMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApi
     */
    public sendMessage(requestParameters: AiChatControllerApiSendMessageRequest, options?: RawAxiosRequestConfig) {
        return AiChatControllerApiFp(this.configuration).sendMessage(requestParameters.sessionId, requestParameters.sendMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AiChatControllerApiStartSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiChatControllerApi
     */
    public startSession(requestParameters: AiChatControllerApiStartSessionRequest, options?: RawAxiosRequestConfig) {
        return AiChatControllerApiFp(this.configuration).startSession(requestParameters.startSessionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

